import akka.actor._
import akka.dispatch.{ Future, Promise }
import com.typesafe.config.ConfigFactory
import akka.testkit._
val remoteConfig = try {
    Class.forName("akka.remote.RemoteActorRefProvider")
    "\nakka.actor.provider=akka.remote.RemoteActorRefProvider"
  } catch {
    case _: ClassNotFoundException => ""
  }
val config=ConfigFactory.parseString("""
  akka.daemonic=on
  akka.remote.netty {
    use-dispatcher-for-io = akka.actor.default-dispatcher
    execution-pool-size = 0
  }
""" + remoteConfig)
val sys=ActorSystem("repl", config.withFallback(ConfigFactory.load())).asInstanceOf[ExtendedActorSystem]
implicit val ec=sys.dispatcher
import akka.util.duration._
import akka.util.Timeout
implicit val timeout=Timeout(5 seconds)
