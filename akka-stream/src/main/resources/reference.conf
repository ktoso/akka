#####################################
# Akka Stream Reference Config File #
#####################################

akka {
  stream {

    # Default flow materializer settings
    materializer {

      # Initial size of buffers used in stream elements
      initial-input-buffer-size = 4
      # Maximum size of buffers used in stream elements
      max-input-buffer-size = 16

      # Fully qualified config path which holds the dispatcher configuration
      # to be used by FlowMaterialiser when creating Actors.
      # When this value is left empty, the default-dispatcher will be used.
      dispatcher = ""

      # Cleanup leaked publishers and subscribers when they are not used within a given
      # deadline
      subscription-timeout {
        # when the subscription timeout is reached one of the following strategies on
        # the "stale" publisher:
        # cancel - cancel it (via `onError` or subscribing to the publisher and
        #          `cancel()`ing the subscription right away
        # warn   - log a warning statement about the stale element (then drop the
        #          reference to it)
        # noop   - do nothing (not recommended)
        mode = cancel

        # time after which a subscriber / publisher is considered stale and eligible
        # for cancelation (see `akka.stream.subscription-timeout.mode`)
        timeout = 5s
      }
      
      # Enable additional troubleshooting logging at DEBUG log level
      debug-logging = off
      
      # Maximum number of elements emitted in batch if downstream signals large demand
      output-burst-limit = 1000
    }


    file-io {
      executor {
        type = "fork-join-executor"

        # these are the same default settings that akka uses
        # TODO: find the best settings

        # This will be used if you have set "executor = "fork-join-executor""
        fork-join-executor {
          # Min number of threads to cap factor-based parallelism number to
          parallelism-min = 8

          # The parallelism factor is used to determine thread pool size using the
          # following formula: ceil(available processors * factor). Resulting size
          # is then bounded by the parallelism-min and parallelism-max values.
          parallelism-factor = 3.0

          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 64
        }

        # This will be used if you have set "executor = "thread-pool-executor""
        thread-pool-executor {
          # Keep alive time for threads
          keep-alive-time = 60s

          # Min number of threads to cap factor-based core number to
          core-pool-size-min = 8

          # The core pool size factor is used to determine thread pool core size
          # using the following formula: ceil(available processors * factor).
          # Resulting size is then bounded by the core-pool-size-min and
          # core-pool-size-max values.
          core-pool-size-factor = 3.0

          # Max number of threads to cap factor-based number to
          core-pool-size-max = 64

          # Minimum number of threads to cap factor-based max number to
          # (if using a bounded task queue)
          max-pool-size-min = 8

          # Max no of threads (if using a bounded task queue) is determined by
          # calculating: ceil(available processors * factor)
          max-pool-size-factor = 3.0

          # Max number of threads to cap factor-based max number to
          # (if using a  bounded task queue)
          max-pool-size-max = 64

          # Specifies the bounded capacity of the task queue (< 1 == unbounded)
          task-queue-size = -1

          # Specifies which type of task queue will be used, can be "array" or
          # "linked" (default)
          task-queue-type = "linked"

          # Allow core threads to time out
          allow-core-timeout = on
        }
      }

    }
  }
}
