####################
# Akka Config File #
####################

# This file has all the default settings, so all these could be removed with no visible effect.
# Modify as needed.

akka {
  version = "0.10"

  time-unit = "seconds" # default timeout time unit for all timeout properties throughout the config

  # FQN (Fully Qualified Name) to the class doing initial typed actor/actor
  # supervisor bootstrap, should be defined in default constructor
  boot = ["sample.camel.Boot",
          "sample.rest.java.Boot",
          "sample.rest.scala.Boot",
          "sample.security.Boot"]

  actor {
    timeout = 5              # default timeout for future based invocations
    serialize-messages = off # does a deep clone of (non-primitive) messages to ensure immutability
    throughput = 5           # default throughput for ExecutorBasedEventDrivenDispatcher
  }

  stm {
    fair = on             # should global transactions be fair or non-fair (non fair yield better performance)
    jta-aware = off       # 'on' means that if there JTA Transaction Manager available then the STM will
                          # begin (or join), commit or rollback the JTA transaction. Default is 'off'.
    timeout = 5           # default timeout for blocking transactions and transaction set (in unit defined by 
                          # the time-unit property)
  }

  jta {
    provider = "from-jndi" # Options: "from-jndi" (means that Akka will try to detect a TransactionManager in the JNDI)
                           #          "atomikos" (means that Akka will use the Atomikos based JTA impl in 'akka-jta',
                           #          e.g. you need the akka-jta JARs on classpath).
    timeout = 60
  }

  rest {
    service = on
    hostname = "localhost"
    port = 9998
    filters = ["se.scalablesolutions.akka.security.AkkaSecurityFilterFactory"]     # List with all jersey filters to use
    resource_packages = ["sample.rest.scala",
                         "sample.rest.java",
                         "sample.security"] # List with all resource packages for your Jersey services
    authenticator = "sample.security.BasicAuthenticationService" # The authentication service to use. Need to be overridden (uses sample now)
    #maxInactiveActivity = 60000 #Atmosphere CometSupport maxInactiveActivity
    #IF you are using a KerberosAuthenticationActor
    #   kerberos {
    #     servicePrincipal = "HTTP/localhost@EXAMPLE.COM"
    #     keyTabLocation   = "URL to keytab"
    #     kerberosDebug    = "true"
    #     realm            = "EXAMPLE.COM"
    #   }
  }

  remote {
    compression-scheme = "zlib" # Options: "zlib" (lzf to come), leave out for no compression
    zlib-compression-level = 6  # Options: 0-9 (1 being fastest and 9 being the most compressed), default is 6

    ssl {
      service = off #on / off

      #You can either use java command-line options or use the settings below

      #key-store-type = "pkcs12"         #Same as -Djavax.net.ssl.keyStoreType=pkcs12
      #key-store = "yourcertificate.p12" #Same as -Djavax.net.ssl.keyStore=yourcertificate.p12
      #key-store-pass = "$PASS"          #Same as -Djavax.net.ssl.keyStorePassword=$PASS

      #trust-store-type = "jks"          #Same as -Djavax.net.ssl.trustStoreType=jks
      #trust-store = "your.keystore"     #Same as -Djavax.net.ssl.trustStore=your.keystore
      #trust-store-pass = "$PASS"        #Same as -Djavax.net.ssl.trustStorePassword=$PASS

      #This can be useful for debugging
      debug = off #if on, very verbose debug, same as -Djavax.net.debug=ssl
    }

    cluster {
      service = on
      name = "default"                                                        # The name of the cluster
      serializer = "se.scalablesolutions.akka.serialization.Serializer$Java$" # FQN of the serializer class
    }

    server {
      service = on
      hostname = "localhost"
      port = 9999
      connection-timeout = 1
    }

    client {
      reconnect-delay = 5
      read-timeout = 10
    }
  }

  storage {
    cassandra {
      hostname = "127.0.0.1"        # IP address or hostname of one of the Cassandra cluster's seeds
      port = 9160
      consistency-level = "QUORUM"  # Options: ZERO, ONE, QUORUM, DCQUORUM, DCQUORUMSYNC, ALL, ANY
    }

    mongodb {
      hostname = "127.0.0.1"        # IP address or hostname of the MongoDB DB instance
      port = 27017
      dbname = "mydb"
    }

    redis {
      hostname = "127.0.0.1"        # IP address or hostname of the Redis instance
      port = 6379
    }
  }
}
